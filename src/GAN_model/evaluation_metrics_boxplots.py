from pathlib import Path
import sys
import os
import matplotlib.pyplot as plt
import tensorflow as tf
import tensorflow.image as tf_image
current_directory = Path(__file__).parents[2]
sys.path.append(str(current_directory))
from src.GAN_model.GAN import GAN


def calculate_metrics(predictions, targets):
    """
    This function allows to calculate evaluation metrics: PSNR and SSIM


    Args:
        predictions (tf.Tensor): The predicted images generated by the model.
        targets (tf.Tensor): The ground truth images to comparre against

    Returns:
        tuple: A tuple containing SSIM and PSNR values.
    """
    ssim = tf_image.ssim(targets, predictions, max_val=1.0)
    psnr = tf_image.psnr(targets, predictions, max_val=1.0)
    return ssim, psnr


def plot_metrics(ssim_values, psnr_values, output_path):
    """
    Generates and saves boxplots 
    
    Args:
        ssim_values (list or np.array): List of SSIM values.
        psnr_values (list or np.array): List of PSNR values
        output_path (str): Path to save the generated plot.

    """
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))

    # SSIM
    axes[0].boxplot(ssim_values, sym='')
    axes[0].set_title('SSIM')
    axes[0].set_xticks([1])
    axes[0].set_xticklabels([''])

    #  PSNR
    axes[2].boxplot(psnr_values, sym='')
    axes[2].set_title('PSNR')
    axes[2].set_xticks([1])
    axes[2].set_xticklabels([''])

    # saving the plots
    plt.suptitle('Evaluation Metrics on Validation Data')
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.savefig(output_path)
    plt.close()

if __name__ == "__main__":

    GAN_model = GAN()
    dir = os.path.join(GAN_model.checkpoint_dir, 'checkpoint_X_sketch_full_batch2')
    GAN_model.load_model(os.path.join(dir))

    # loading the datasets
    tr, val_dataset = GAN_model.load_data()
    val_dataset = val_dataset.batch(1)

    # init metrics 
    ssim_values = []
    psnr_values = []

    # calculate metrics for each element of the dataset
    val_iter = iter(val_dataset)
    
    for example_target, example_input in val_iter:
        target, semantic_map = example_target, example_input
        prediction = GAN_model.generator.model(semantic_map, training=True)

        ssim_value, psnr_value = calculate_metrics(prediction, target)
        ssim_values.append(tf.reduce_mean(ssim_value).numpy())
        psnr_values.append(tf.reduce_mean(psnr_value).numpy())

    # plott the box plots
    plot_metrics(ssim_values, psnr_values, os.path.join(GAN_model.current_path, 'evaluation.png'))

    print(f'Evaluation metrics saved to {os.path.join(GAN_model.current_path, "evaluation.png")}')
