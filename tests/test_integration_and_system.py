from src.GAN_model.GAN import *
from src.GAN_model.generator import *
from src.GAN_model.discriminator import *

import cv2
import numpy as np

class TestIntegration:
    def setup_method(self):
        """Defining a Generator, a discriminator, a GAN and a raw dataset"""
        self.current_directory = os.getcwd()

        self.generator = Generator()
        self.discriminator = Discriminator(256) 
        self.GAN = GAN() 
        
        current_directory = os.getcwd()
        self.semantic_map_path = os.path.join(current_directory,"tests","test_files","integration_testing",'sematic_map.jpg')
        self.target_path = os.path.join(current_directory,"tests","test_files","integration_testing",'target.png')
        
        # semantic map containing only 1 and 2
        semantic_map = np.random.choice([1., 2.], size=(256, 256,1))
        #generating target images, containing pixels in [0,255]
        image_target = np.random.uniform(low=0.0, high=255.0, size=(256, 256, 3)).astype(np.float32)

        
        cv2.imwrite(self.semantic_map_path, semantic_map)
        cv2.imwrite( self.target_path, image_target)        
        
    def test_integration_data_pipeline_generator(self):
        """Testing that the dataset generated by the data pipeline matches with whats is 
        expected with the Generator"""
        
        # loading images with the load_and_preprocess data to create data pipeline
        loaded_input_image, loaded_target_image = self.GAN.load_and_preprocess(self.semantic_map_path, self.target_path)
        
        #add batch dimension
        loaded_input_image = tf.expand_dims(loaded_input_image, axis=0)
        loaded_target_image = tf.expand_dims(loaded_target_image, axis=0)
        
        # check that images are in [-1,1]
        assert tf.reduce_min(loaded_input_image) >= -1.0 and tf.reduce_max(loaded_input_image) <= 1.0
        assert tf.reduce_min(loaded_target_image) >= -1.0 and tf.reduce_max(loaded_target_image) <= 1.0
        
    def test_integration_discriminator(self):
        """
        Testing the output dimension of the discriminator, it should be 30*30*1
        """
        _, validation_set = self.GAN.load_data()
        epoch_val_dataset = validation_set.batch(1, drop_remainder=True)
        test_target, test_input = next(iter(epoch_val_dataset.take(1)))   
        
        # Add batch dimension
        test_input = tf.expand_dims(test_input, axis=0)
        test_target = tf.expand_dims(test_target, axis=0)    
        
        discriminator_output = self.discriminator.model([test_input[0], test_target[0]], training=False)
        assert discriminator_output.shape == (1,30,30,1)
        


class TestSystem:
    
    def setup_method(self):
        """Defining a Generator, a discriminator and a GAN """
        self.current_directory = os.getcwd()

        self.generator = Generator()
        self.discriminator = Discriminator(256) 
        self.GAN = GAN() 
        
    def test_generator_output(self):
        """
        Testing the output of the generator is a RGB image, with values in [-1,1], and size 256*256
        """
        _, validation_set = self.GAN.load_data()
        epoch_val_dataset = validation_set.batch(1, drop_remainder=True)
        test_target, test_input = next(iter(epoch_val_dataset.take(1)))   
        
        # Add batch dimension
        test_input = tf.expand_dims(test_input, axis=0)
        test_target = tf.expand_dims(test_target, axis=0)    
        
        generator_output = self.generator.model(test_input[0], training=False)
        assert generator_output.shape == (1,256,256,3)
        assert tf.reduce_min(generator_output) >= -1.0 and tf.reduce_max(generator_output) <= 1.0
